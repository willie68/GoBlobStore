{package model
// part of the initializer code block omitted for brevity

var ops = map[string]func(int, int) int {
    "+": func(l, r int) int {
        return l + r
    },
    "-": func(l, r int) int {
        return l - r
    },
    "*": func(l, r int) int {
        return l * r
    },
    "/": func(l, r int) int {
        return l / r
    },
}

func toIfaceSlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

func eval(first, rest any) int {
    l := first.(int)
    restSl := toIfaceSlice(rest)
    for _, v := range restSl {
        restExpr := toIfaceSlice(v)
        r := restExpr[3].(int)
        op := restExpr[1].(string)
        l = ops[op](l, r)
    }
    return l
}
}


Input <- expr:Expr EOF {
    return expr, nil
}

Expr <- _ first:Term rest:( _ AddOp _ Term )* _ {
    return eval(first, rest), nil
}

Term <- first:Factor rest:( _ MulOp _ Factor )* {
    return eval(first, rest), nil
}

Factor <- '(' expr:Expr ')' {
    return expr, nil
} / integer:Integer {
    return integer, nil
}

AddOp <- ( '+' / '-' ) {
    return string(c.text), nil
}

MulOp <- ( '*' / '/' ) {
    return string(c.text), nil
}

Integer <- '-'? [0-9]+ {
    return strconv.Atoi(string(c.text))
}

_ "whitespace" <- [ \n\t\r]*

EOF <- !.


Input <- expr:Expr EOF {
    return expr, nil
}

Expr "Expression" <- _ c:Condition _ 
/*{
    return fmt.Sprintf(`%s`,c.String()), nil
}
*/

Condition <- f:FieldName : [op:Operator] v:Value 
/*{
  return Condition {
      FieldName: f,
      Operator: op,
      Value: v,
  }
}
*/

FieldName <- _ .* _ 
/*{
    return c.Text
}
*/

Operator <- <= // >= // < // > // = // != 
/*{
    switch c.Text  {
    case "<=":
        return LE
    case ">=":
        return GE
    case "<":
        return LT
    case ">":
        return GT
    case "=":
        return EQ
    case "!=":
        return NE
    }
    return NO
}
*/

Value <- .* 
/*{
    return c.Text
}
*/

_ "whitespace" <- [ \n\t\r]*

EOF <- !.