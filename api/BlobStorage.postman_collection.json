{
	"info": {
		"_postman_id": "81e97323-7e23-7a28-48d2-da5c9c79f827",
		"name": "BlobStorage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Basic ZGV2dGVzdEBlYXN5LmRlOmVhc3lzcGlyaXQ="
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant",
						"value": "MCS",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://localhost:8443/api/v1/config",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"config"
					]
				},
				"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
			},
			"response": []
		},
		{
			"name": "createStore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "x-tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\":\"blink.tps\",\r\n   \"hardware\":\"arduinpsps\",\r\n   \"content\": \":loop\\nPORT #0x0F\\nWAIT 200ms\\nPORT #0x00\\nWAIT 200m\\nRJMP :loop\"\r\n}"
				},
				"url": {
					"raw": "https://localhost:8443/api/v1/config/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"config",
						""
					]
				},
				"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
			},
			"response": []
		},
		{
			"name": "delete store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS"
					}
				],
				"url": {
					"raw": "https://localhost:8443/api/v1/config/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"config",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "customerForeignId",
							"value": "100212",
							"disabled": true
						},
						{
							"key": "templateName",
							"value": "registration.vm",
							"disabled": true
						},
						{
							"key": "link",
							"value": "https://archivierung.lexware.de/activation/activatePwd.html?tokenId=f5lgho6t8motabq82po8khr387",
							"type": "text",
							"disabled": true
						},
						{
							"key": "deleteCustomer",
							"value": "false",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:8443/api/v1/config/size",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"config",
						"size"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Blobs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs?limit=10&offset=0",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create Blob Form",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-apiomat-apikey",
						"value": "8469361967891789473",
						"disabled": true
					},
					{
						"key": "X-apiomat-system",
						"value": "TEST",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Basic ZGV2dGVzdEBlYXN5LmRlOmVhc3lzcGlyaXQ=",
						"disabled": true
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "X-retention",
						"value": "1",
						"type": "text"
					},
					{
						"key": "X-MeinSuperDuperHeader",
						"value": "Willie was here",
						"type": "text"
					},
					{
						"key": "X-json.header",
						"value": "{\"name\":\"willie\", \"surname\":\"schreiber\"}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/wklaa/Desktop/SPS_Emu.xml"
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs"
					]
				},
				"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
			},
			"response": []
		},
		{
			"name": "post Blob form",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXX0.W5-81oFlhmLUgxnuUCiy8zwi6BLOssrTqQpXtbLSDtQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-tenant",
						"value": "MCS",
						"type": "text"
					},
					{
						"key": "X-meintollerkey",
						"value": "{\"name\":\"WILLIE\"}",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/w.klaas/Desktop/gopher_1.png"
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs/",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post Blob Direkt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-filename",
						"value": "readme.pdf",
						"type": "text"
					},
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "text"
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/w.klaas/Desktop/gopher_1.png"
					}
				},
				"url": {
					"raw": "https://localhost:8443/api/v1/blobs",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Blob Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs/6c81682143fd44bc9ff2d4580d5f6463/info",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						"6c81682143fd44bc9ff2d4580d5f6463",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Blob",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "X-Tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs/3765bb1f448c4d8c846f956439645562",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						"3765bb1f448c4d8c846f956439645562"
					]
				}
			},
			"response": []
		},
		{
			"name": "put Blob Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"X-Http-Header-01\": \"willie2\",\r\n    \"filename\": \"Hallo.pdf\",\r\n    \"hash\": \"\",\r\n    \"lastAccess\": 0,\r\n    \"retention\": 0,\r\n    \"storeid\": \"mcs\",\r\n    \"tenantID\": \"mcs\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8443/api/v1/blobs/6c81682143fd44bc9ff2d4580d5f6463/info",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						"6c81682143fd44bc9ff2d4580d5f6463",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE bLob",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2Mzg2MDAxMTcsImV4cCI6MTY3MDEzNjExNywiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2NrZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQcm9qZWN0IEFkbWluaXN0cmF0b3IiXSwiVGVuYW50IjoiRUFTWTEifQ.r12KWh3DYVJfYAQLF7gSFoqINfvV2JgG5MAjc5Ol624",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs/1df19564bf724bb3bf7030638bc902a2",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						"1df19564bf724bb3bf7030638bc902a2"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset Blob retention",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "X-Tenant",
						"value": "MCS",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/blobs/f72992da-0f71-11ea-afb2-00090faa0001/resetretention",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"blobs",
						"f72992da-0f71-11ea-afb2-00090faa0001",
						"resetretention"
					]
				}
			},
			"response": []
		},
		{
			"name": "livez",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/livez",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"livez"
					]
				}
			},
			"response": []
		},
		{
			"name": "readyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/readyz",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"readyz"
					]
				}
			},
			"response": []
		},
		{
			"name": "metrics",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/metrics",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"metrics"
					]
				}
			},
			"response": []
		},
		{
			"name": "local: get check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/admin/check",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"admin",
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "local: post check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic ZGV2dGVzdEBlYXN5LmRlOmVhc3lzcGlyaXQ=",
						"disabled": true
					},
					{
						"key": "X-tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/admin/check",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"admin",
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "local: get restore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/admin/restore",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"admin",
						"restore"
					]
				}
			},
			"response": []
		},
		{
			"name": "local: post restore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON;",
							"",
							"try { ",
							"    responseJSON = JSON.parse(responseBody); ",
							"    tests['response is valid JSON'] = true;",
							"}",
							"catch (e) { ",
							"    responseJSON = {}; ",
							"    tests['response is valid JSON'] = false;",
							"}",
							"",
							"",
							"tests['response has post data'] = _.has(responseJSON, 'form');",
							"tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic ZGV2dGVzdEBlYXN5LmRlOmVhc3lzcGlyaXQ=",
						"disabled": true
					},
					{
						"key": "X-tenant",
						"value": "MCS"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://127.0.0.1:8443/api/v1/admin/restore",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8443",
					"path": [
						"api",
						"v1",
						"admin",
						"restore"
					]
				}
			},
			"response": []
		}
	]
}