// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	model "github.com/willie68/GoBlobStore/pkg/model"
)

// BlobStorage is an autogenerated mock type for the BlobStorage type
type BlobStorage struct {
	mock.Mock
}

type BlobStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *BlobStorage) EXPECT() *BlobStorage_Expecter {
	return &BlobStorage_Expecter{mock: &_m.Mock}
}

// AddRetention provides a mock function with given fields: r
func (_m *BlobStorage) AddRetention(r *model.RetentionEntry) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RetentionEntry) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_AddRetention_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRetention'
type BlobStorage_AddRetention_Call struct {
	*mock.Call
}

// AddRetention is a helper method to define mock.On call
//  - r *model.RetentionEntry
func (_e *BlobStorage_Expecter) AddRetention(r interface{}) *BlobStorage_AddRetention_Call {
	return &BlobStorage_AddRetention_Call{Call: _e.mock.On("AddRetention", r)}
}

func (_c *BlobStorage_AddRetention_Call) Run(run func(r *model.RetentionEntry)) *BlobStorage_AddRetention_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.RetentionEntry))
	})
	return _c
}

func (_c *BlobStorage_AddRetention_Call) Return(_a0 error) *BlobStorage_AddRetention_Call {
	_c.Call.Return(_a0)
	return _c
}

// CheckBlob provides a mock function with given fields: id
func (_m *BlobStorage) CheckBlob(id string) (*model.CheckInfo, error) {
	ret := _m.Called(id)

	var r0 *model.CheckInfo
	if rf, ok := ret.Get(0).(func(string) *model.CheckInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobStorage_CheckBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBlob'
type BlobStorage_CheckBlob_Call struct {
	*mock.Call
}

// CheckBlob is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) CheckBlob(id interface{}) *BlobStorage_CheckBlob_Call {
	return &BlobStorage_CheckBlob_Call{Call: _e.mock.On("CheckBlob", id)}
}

func (_c *BlobStorage_CheckBlob_Call) Run(run func(id string)) *BlobStorage_CheckBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_CheckBlob_Call) Return(_a0 *model.CheckInfo, _a1 error) *BlobStorage_CheckBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Close provides a mock function with given fields:
func (_m *BlobStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type BlobStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *BlobStorage_Expecter) Close() *BlobStorage_Close_Call {
	return &BlobStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *BlobStorage_Close_Call) Run(run func()) *BlobStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobStorage_Close_Call) Return(_a0 error) *BlobStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteBlob provides a mock function with given fields: id
func (_m *BlobStorage) DeleteBlob(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_DeleteBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlob'
type BlobStorage_DeleteBlob_Call struct {
	*mock.Call
}

// DeleteBlob is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) DeleteBlob(id interface{}) *BlobStorage_DeleteBlob_Call {
	return &BlobStorage_DeleteBlob_Call{Call: _e.mock.On("DeleteBlob", id)}
}

func (_c *BlobStorage_DeleteBlob_Call) Run(run func(id string)) *BlobStorage_DeleteBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_DeleteBlob_Call) Return(_a0 error) *BlobStorage_DeleteBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteRetention provides a mock function with given fields: id
func (_m *BlobStorage) DeleteRetention(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_DeleteRetention_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRetention'
type BlobStorage_DeleteRetention_Call struct {
	*mock.Call
}

// DeleteRetention is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) DeleteRetention(id interface{}) *BlobStorage_DeleteRetention_Call {
	return &BlobStorage_DeleteRetention_Call{Call: _e.mock.On("DeleteRetention", id)}
}

func (_c *BlobStorage_DeleteRetention_Call) Run(run func(id string)) *BlobStorage_DeleteRetention_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_DeleteRetention_Call) Return(_a0 error) *BlobStorage_DeleteRetention_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllRetentions provides a mock function with given fields: callback
func (_m *BlobStorage) GetAllRetentions(callback func(model.RetentionEntry) bool) error {
	ret := _m.Called(callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(model.RetentionEntry) bool) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_GetAllRetentions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRetentions'
type BlobStorage_GetAllRetentions_Call struct {
	*mock.Call
}

// GetAllRetentions is a helper method to define mock.On call
//  - callback func(model.RetentionEntry) bool
func (_e *BlobStorage_Expecter) GetAllRetentions(callback interface{}) *BlobStorage_GetAllRetentions_Call {
	return &BlobStorage_GetAllRetentions_Call{Call: _e.mock.On("GetAllRetentions", callback)}
}

func (_c *BlobStorage_GetAllRetentions_Call) Run(run func(callback func(model.RetentionEntry) bool)) *BlobStorage_GetAllRetentions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(model.RetentionEntry) bool))
	})
	return _c
}

func (_c *BlobStorage_GetAllRetentions_Call) Return(_a0 error) *BlobStorage_GetAllRetentions_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetBlobDescription provides a mock function with given fields: id
func (_m *BlobStorage) GetBlobDescription(id string) (*model.BlobDescription, error) {
	ret := _m.Called(id)

	var r0 *model.BlobDescription
	if rf, ok := ret.Get(0).(func(string) *model.BlobDescription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BlobDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobStorage_GetBlobDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobDescription'
type BlobStorage_GetBlobDescription_Call struct {
	*mock.Call
}

// GetBlobDescription is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) GetBlobDescription(id interface{}) *BlobStorage_GetBlobDescription_Call {
	return &BlobStorage_GetBlobDescription_Call{Call: _e.mock.On("GetBlobDescription", id)}
}

func (_c *BlobStorage_GetBlobDescription_Call) Run(run func(id string)) *BlobStorage_GetBlobDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_GetBlobDescription_Call) Return(_a0 *model.BlobDescription, _a1 error) *BlobStorage_GetBlobDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBlobs provides a mock function with given fields: callback
func (_m *BlobStorage) GetBlobs(callback func(string) bool) error {
	ret := _m.Called(callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(string) bool) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_GetBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobs'
type BlobStorage_GetBlobs_Call struct {
	*mock.Call
}

// GetBlobs is a helper method to define mock.On call
//  - callback func(string) bool
func (_e *BlobStorage_Expecter) GetBlobs(callback interface{}) *BlobStorage_GetBlobs_Call {
	return &BlobStorage_GetBlobs_Call{Call: _e.mock.On("GetBlobs", callback)}
}

func (_c *BlobStorage_GetBlobs_Call) Run(run func(callback func(string) bool)) *BlobStorage_GetBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string) bool))
	})
	return _c
}

func (_c *BlobStorage_GetBlobs_Call) Return(_a0 error) *BlobStorage_GetBlobs_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetLastError provides a mock function with given fields:
func (_m *BlobStorage) GetLastError() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_GetLastError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastError'
type BlobStorage_GetLastError_Call struct {
	*mock.Call
}

// GetLastError is a helper method to define mock.On call
func (_e *BlobStorage_Expecter) GetLastError() *BlobStorage_GetLastError_Call {
	return &BlobStorage_GetLastError_Call{Call: _e.mock.On("GetLastError")}
}

func (_c *BlobStorage_GetLastError_Call) Run(run func()) *BlobStorage_GetLastError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobStorage_GetLastError_Call) Return(_a0 error) *BlobStorage_GetLastError_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetRetention provides a mock function with given fields: id
func (_m *BlobStorage) GetRetention(id string) (model.RetentionEntry, error) {
	ret := _m.Called(id)

	var r0 model.RetentionEntry
	if rf, ok := ret.Get(0).(func(string) model.RetentionEntry); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.RetentionEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobStorage_GetRetention_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRetention'
type BlobStorage_GetRetention_Call struct {
	*mock.Call
}

// GetRetention is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) GetRetention(id interface{}) *BlobStorage_GetRetention_Call {
	return &BlobStorage_GetRetention_Call{Call: _e.mock.On("GetRetention", id)}
}

func (_c *BlobStorage_GetRetention_Call) Run(run func(id string)) *BlobStorage_GetRetention_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_GetRetention_Call) Return(_a0 model.RetentionEntry, _a1 error) *BlobStorage_GetRetention_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenant provides a mock function with given fields:
func (_m *BlobStorage) GetTenant() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BlobStorage_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type BlobStorage_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
func (_e *BlobStorage_Expecter) GetTenant() *BlobStorage_GetTenant_Call {
	return &BlobStorage_GetTenant_Call{Call: _e.mock.On("GetTenant")}
}

func (_c *BlobStorage_GetTenant_Call) Run(run func()) *BlobStorage_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobStorage_GetTenant_Call) Return(_a0 string) *BlobStorage_GetTenant_Call {
	_c.Call.Return(_a0)
	return _c
}

// HasBlob provides a mock function with given fields: id
func (_m *BlobStorage) HasBlob(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobStorage_HasBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasBlob'
type BlobStorage_HasBlob_Call struct {
	*mock.Call
}

// HasBlob is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) HasBlob(id interface{}) *BlobStorage_HasBlob_Call {
	return &BlobStorage_HasBlob_Call{Call: _e.mock.On("HasBlob", id)}
}

func (_c *BlobStorage_HasBlob_Call) Run(run func(id string)) *BlobStorage_HasBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_HasBlob_Call) Return(_a0 bool, _a1 error) *BlobStorage_HasBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Init provides a mock function with given fields:
func (_m *BlobStorage) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type BlobStorage_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *BlobStorage_Expecter) Init() *BlobStorage_Init_Call {
	return &BlobStorage_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *BlobStorage_Init_Call) Run(run func()) *BlobStorage_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobStorage_Init_Call) Return(_a0 error) *BlobStorage_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

// ResetRetention provides a mock function with given fields: id
func (_m *BlobStorage) ResetRetention(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_ResetRetention_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetRetention'
type BlobStorage_ResetRetention_Call struct {
	*mock.Call
}

// ResetRetention is a helper method to define mock.On call
//  - id string
func (_e *BlobStorage_Expecter) ResetRetention(id interface{}) *BlobStorage_ResetRetention_Call {
	return &BlobStorage_ResetRetention_Call{Call: _e.mock.On("ResetRetention", id)}
}

func (_c *BlobStorage_ResetRetention_Call) Run(run func(id string)) *BlobStorage_ResetRetention_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlobStorage_ResetRetention_Call) Return(_a0 error) *BlobStorage_ResetRetention_Call {
	_c.Call.Return(_a0)
	return _c
}

// RetrieveBlob provides a mock function with given fields: id, w
func (_m *BlobStorage) RetrieveBlob(id string, w io.Writer) error {
	ret := _m.Called(id, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Writer) error); ok {
		r0 = rf(id, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_RetrieveBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveBlob'
type BlobStorage_RetrieveBlob_Call struct {
	*mock.Call
}

// RetrieveBlob is a helper method to define mock.On call
//  - id string
//  - w io.Writer
func (_e *BlobStorage_Expecter) RetrieveBlob(id interface{}, w interface{}) *BlobStorage_RetrieveBlob_Call {
	return &BlobStorage_RetrieveBlob_Call{Call: _e.mock.On("RetrieveBlob", id, w)}
}

func (_c *BlobStorage_RetrieveBlob_Call) Run(run func(id string, w io.Writer)) *BlobStorage_RetrieveBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Writer))
	})
	return _c
}

func (_c *BlobStorage_RetrieveBlob_Call) Return(_a0 error) *BlobStorage_RetrieveBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

// SearchBlobs provides a mock function with given fields: query, callback
func (_m *BlobStorage) SearchBlobs(query string, callback func(string) bool) error {
	ret := _m.Called(query, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string) bool) error); ok {
		r0 = rf(query, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_SearchBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBlobs'
type BlobStorage_SearchBlobs_Call struct {
	*mock.Call
}

// SearchBlobs is a helper method to define mock.On call
//  - query string
//  - callback func(string) bool
func (_e *BlobStorage_Expecter) SearchBlobs(query interface{}, callback interface{}) *BlobStorage_SearchBlobs_Call {
	return &BlobStorage_SearchBlobs_Call{Call: _e.mock.On("SearchBlobs", query, callback)}
}

func (_c *BlobStorage_SearchBlobs_Call) Run(run func(query string, callback func(string) bool)) *BlobStorage_SearchBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(string) bool))
	})
	return _c
}

func (_c *BlobStorage_SearchBlobs_Call) Return(_a0 error) *BlobStorage_SearchBlobs_Call {
	_c.Call.Return(_a0)
	return _c
}

// StoreBlob provides a mock function with given fields: b, r
func (_m *BlobStorage) StoreBlob(b *model.BlobDescription, r io.Reader) (string, error) {
	ret := _m.Called(b, r)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.BlobDescription, io.Reader) string); ok {
		r0 = rf(b, r)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.BlobDescription, io.Reader) error); ok {
		r1 = rf(b, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlobStorage_StoreBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreBlob'
type BlobStorage_StoreBlob_Call struct {
	*mock.Call
}

// StoreBlob is a helper method to define mock.On call
//  - b *model.BlobDescription
//  - r io.Reader
func (_e *BlobStorage_Expecter) StoreBlob(b interface{}, r interface{}) *BlobStorage_StoreBlob_Call {
	return &BlobStorage_StoreBlob_Call{Call: _e.mock.On("StoreBlob", b, r)}
}

func (_c *BlobStorage_StoreBlob_Call) Run(run func(b *model.BlobDescription, r io.Reader)) *BlobStorage_StoreBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.BlobDescription), args[1].(io.Reader))
	})
	return _c
}

func (_c *BlobStorage_StoreBlob_Call) Return(_a0 string, _a1 error) *BlobStorage_StoreBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateBlobDescription provides a mock function with given fields: id, b
func (_m *BlobStorage) UpdateBlobDescription(id string, b *model.BlobDescription) error {
	ret := _m.Called(id, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.BlobDescription) error); ok {
		r0 = rf(id, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlobStorage_UpdateBlobDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlobDescription'
type BlobStorage_UpdateBlobDescription_Call struct {
	*mock.Call
}

// UpdateBlobDescription is a helper method to define mock.On call
//  - id string
//  - b *model.BlobDescription
func (_e *BlobStorage_Expecter) UpdateBlobDescription(id interface{}, b interface{}) *BlobStorage_UpdateBlobDescription_Call {
	return &BlobStorage_UpdateBlobDescription_Call{Call: _e.mock.On("UpdateBlobDescription", id, b)}
}

func (_c *BlobStorage_UpdateBlobDescription_Call) Run(run func(id string, b *model.BlobDescription)) *BlobStorage_UpdateBlobDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.BlobDescription))
	})
	return _c
}

func (_c *BlobStorage_UpdateBlobDescription_Call) Return(_a0 error) *BlobStorage_UpdateBlobDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBlobStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlobStorage creates a new instance of BlobStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlobStorage(t mockConstructorTestingTNewBlobStorage) *BlobStorage {
	mock := &BlobStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
